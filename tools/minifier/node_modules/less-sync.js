// Taken from https://github.com/AbleCoder/hem-less/blob/master/lib/less-sync.js
//
// Copyright (c) 2012 Brandon Orther (an.able.coder@gmail.com)
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
(function() {
  var dirname, fs, join, less, _ref;

  _ref = require('path'), dirname = _ref.dirname, join = _ref.join;

  fs = require('fs');

  less = require('less');

  less.Parser.importer = function(file, paths, callback, env) {
      var data, parseFile, path, pathname, _i, _len;
      parseFile = function(e, data) {
            if (e) return callback(e);
            return new less.Parser({
                    paths: [dirname(pathname)].concat(paths),
                    filename: pathname,
                    syncImport: env.syncImport
                  }).parse(data, function(e, root) {
                    return callback(e, root, data);
                  });
          };
      env.syncImport = true;
      pathname = null;
      data = "";
      paths.unshift(".");
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
            path = paths[_i];
            try {
                    pathname = join(path, file);
                    fs.statSync(pathname);
                    break;
                  } catch (e) {
                          pathname = null;
                        }
          }
      if (!pathname) {
            if (typeof env.errback === "function") {
                    env.errback(file, paths, callback);
                  } else {
                          callback({
                                    type: "File",
                                    message: "'" + file + "' wasn't found.\n"
                                  });
                        }
            return;
          }
      try {
            data = fs.readFileSync(pathname, "utf-8");
            return parseFile(null, data);
          } catch (e) {
                return parseFile(e);
              }
    };

  module.exports = less;

}).call(this);
